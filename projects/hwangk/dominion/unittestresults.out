Results for running Unit Tests:
unittest1.c:
Testing updateCoins:
Testing with no treasure cards and no bonus: PASS
Testing with a hand of five coppers: PASS
Testing with a hand of five silvers: PASS
Testing with a hand of five golds: PASS
Testing with no treasure cards and a bonus of 2: PASS
unittest2.c:
Testing each card value with getCost (also tests invalid card name):
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
PASS
unittest3.c:
Testing handCard with a hand of five cards:
Card 1: PASS
Card 2: PASS
Card 3: PASS
Card 4: PASS
Card 5: PASS
unittest4.c:
Testing supplyCount with a newly initialized gamestate:
Testing supplyCount with Curse card and two players: PASS
Testing supplyCount with Estate card and two players: PASS
Testing supplyCount with Duchy card and two players: PASS
Testing supplyCount with Province card and two players: PASS
Testing supplyCount with Curse card and three players: PASS
Testing supplyCount with Estate card and three players: PASS
Testing supplyCount with Duchy card and three players: PASS
Testing supplyCount with Province card and three players: PASS
Testing supplyCount with Curse card and four players: PASS
Testing supplyCount with Estate card and four players: PASS
Testing supplyCount with Duchy card and four players: PASS
Testing supplyCount with Province card and four players: PASS
cardtest1.c:
Testing Adventurer:
Testing when a player's deck is empty and needs to be reshuffled: FAIL
Testing handCount after playing Adventurer: FAIL
Testing to make sure two treasure cards are drawn: PASS
Testing to make sure all excess cards are discarded: PASS
cardtest2.c:
Testing Smithy:
Testing that Smithy draws 3 cards and that it discards the Smithy card: FAIL
Testing that the card in the handPos that was previously Smithy is no longer Smithy: PASS
cardtest3.c:
Testing Village:
Testing that Village draws one card: PASS
Testing that Village adds two actions: PASS
Testing that Village discards the Village card when played: PASS
cardtest4.c:
Testing Outpost:
Testing that Outpost sets the outpost flag: PASS
Testing that the handPos that was once outpost is no longer outpost: PASS
Testing that the outpost card is discarded when played: PASS
Function 'playSteward'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'playGreatHall'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'playVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'playAdventurer'
Lines executed:85.71% of 14
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:10.60% of 217
Branches executed:15.05% of 186
Taken at least once:5.38% of 186
Calls executed:8.93% of 56

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:36.17% of 564
Branches executed:35.41% of 418
Taken at least once:27.99% of 418
Calls executed:21.51% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://prototypes for assignment 2 functions
        -:    9:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z);
        -:   10:int playSmithy(int i, int currentPlayer, struct gameState *state, int handPos);
        -:   11:int playVillage(int currentPlayer, struct gameState *state, int handPos);
        -:   12:int playGreatHall(int currentPlayer, struct gameState *state, int handPos);
        -:   13:int playSteward(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos);
        -:   14:
        -:   15:
function compare called 345 returned 100% blocks executed 83%
      345:   16:int compare(const void* a, const void* b) {
      345:   17:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 345
    #####:   18:    return 1;
      345:   19:  if (*(int*)a < *(int*)b)
branch  0 taken 92 (fallthrough)
branch  1 taken 253
       92:   20:    return -1;
      253:   21:  return 0;
        -:   22:}
        -:   23:
function newGame called 10 returned 100% blocks executed 100%
       10:   24:struct gameState* newGame() {
       10:   25:  struct gameState* g = malloc(sizeof(struct gameState));
       10:   26:  return g;
        -:   27:}
        -:   28:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   29:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   30:		  int k8, int k9, int k10) {
    #####:   31:  int* k = malloc(10 * sizeof(int));
    #####:   32:  k[0] = k1;
    #####:   33:  k[1] = k2;
    #####:   34:  k[2] = k3;
    #####:   35:  k[3] = k4;
    #####:   36:  k[4] = k5;
    #####:   37:  k[5] = k6;
    #####:   38:  k[6] = k7;
    #####:   39:  k[7] = k8;
    #####:   40:  k[8] = k9;
    #####:   41:  k[9] = k10;
    #####:   42:  return k;
        -:   43:}
        -:   44:
function initializeGame called 10 returned 100% blocks executed 95%
       10:   45:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   46:		   struct gameState *state) {
        -:   47:
        -:   48:  int i;
        -:   49:  int j;
        -:   50:  int it;			
        -:   51:  //set up random number generator
       10:   52:  SelectStream(1);
call    0 returned 10
       10:   53:  PutSeed((long)randomSeed);
call    0 returned 10
        -:   54:  
        -:   55:  //check number of players
       10:   56:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        -:   57:    {
    #####:   58:      return -1;
        -:   59:    }
        -:   60:
        -:   61:  //set number of players
       10:   62:  state->numPlayers = numPlayers;
        -:   63:
        -:   64:  //check selected kingdom cards are different
      110:   65:  for (i = 0; i < 10; i++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   66:    {
     1100:   67:      for (j = 0; j < 10; j++)
branch  0 taken 1000
branch  1 taken 100 (fallthrough)
        -:   68:        {
     1000:   69:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 900 (fallthrough)
branch  1 taken 100
branch  2 taken 0 (fallthrough)
branch  3 taken 900
        -:   70:	    {
    #####:   71:	      return -1;
        -:   72:	    }
        -:   73:        }
        -:   74:    }
        -:   75:
        -:   76:
        -:   77:  //initialize supply
        -:   78:  ///////////////////////////////
        -:   79:
        -:   80:  //set number of Curse cards
       10:   81:  if (numPlayers == 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        -:   82:    {
        8:   83:      state->supplyCount[curse] = 10;
        -:   84:    }
        2:   85:  else if (numPlayers == 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   86:    {
        1:   87:      state->supplyCount[curse] = 20;
        -:   88:    }
        -:   89:  else
        -:   90:    {
        1:   91:      state->supplyCount[curse] = 30;
        -:   92:    }
        -:   93:
        -:   94:  //set number of Victory cards
       10:   95:  if (numPlayers == 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        -:   96:    {
        8:   97:      state->supplyCount[estate] = 8;
        8:   98:      state->supplyCount[duchy] = 8;
        8:   99:      state->supplyCount[province] = 8;
        -:  100:    }
        -:  101:  else
        -:  102:    {
        2:  103:      state->supplyCount[estate] = 12;
        2:  104:      state->supplyCount[duchy] = 12;
        2:  105:      state->supplyCount[province] = 12;
        -:  106:    }
        -:  107:
        -:  108:  //set number of Treasure cards
       10:  109:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  110:  state->supplyCount[silver] = 40;
       10:  111:  state->supplyCount[gold] = 30;
        -:  112:
        -:  113:  //set number of Kingdom cards
      210:  114:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 200
branch  1 taken 10 (fallthrough)
        -:  115:    {
     1650:  116:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1550
branch  1 taken 100 (fallthrough)
        -:  117:	{
     1550:  118:	  if (kingdomCards[j] == i)
branch  0 taken 100 (fallthrough)
branch  1 taken 1450
        -:  119:	    {
        -:  120:	      //check if card is a 'Victory' Kingdom card
      100:  121:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 9 (fallthrough)
branch  3 taken 81
        -:  122:		{
       38:  123:		  if (numPlayers == 2){ 
branch  0 taken 15 (fallthrough)
branch  1 taken 4
       15:  124:		    state->supplyCount[i] = 8; 
        -:  125:		  }
        4:  126:		  else{ state->supplyCount[i] = 12; }
        -:  127:		}
        -:  128:	      else
        -:  129:		{
       81:  130:		  state->supplyCount[i] = 10;
        -:  131:		}
      100:  132:	      break;
        -:  133:	    }
        -:  134:	  else    //card is not in the set choosen for the game
        -:  135:	    {
     1450:  136:	      state->supplyCount[i] = -1;
        -:  137:	    }
        -:  138:	}
        -:  139:
        -:  140:    }
        -:  141:
        -:  142:  ////////////////////////
        -:  143:  //supply intilization complete
        -:  144:
        -:  145:  //set player decks
       33:  146:  for (i = 0; i < numPlayers; i++)
branch  0 taken 23
branch  1 taken 10 (fallthrough)
        -:  147:    {
       23:  148:      state->deckCount[i] = 0;
       92:  149:      for (j = 0; j < 3; j++)
branch  0 taken 69
branch  1 taken 23 (fallthrough)
        -:  150:	{
       69:  151:	  state->deck[i][j] = estate;
       69:  152:	  state->deckCount[i]++;
        -:  153:	}
      184:  154:      for (j = 3; j < 10; j++)
branch  0 taken 161
branch  1 taken 23 (fallthrough)
        -:  155:	{
      161:  156:	  state->deck[i][j] = copper;
      161:  157:	  state->deckCount[i]++;		
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //shuffle player decks
       33:  162:  for (i = 0; i < numPlayers; i++)
branch  0 taken 23
branch  1 taken 10 (fallthrough)
        -:  163:    {
       23:  164:      if ( shuffle(i, state) < 0 )
call    0 returned 23
branch  1 taken 0 (fallthrough)
branch  2 taken 23
        -:  165:	{
    #####:  166:	  return -1;
        -:  167:	}
        -:  168:    }
        -:  169:
        -:  170:  //draw player hands
       33:  171:  for (i = 0; i < numPlayers; i++)
branch  0 taken 23
branch  1 taken 10 (fallthrough)
        -:  172:    {  
        -:  173:      //initialize hand size to zero
       23:  174:      state->handCount[i] = 0;
       23:  175:      state->discardCount[i] = 0;
        -:  176:      //draw 5 cards
        -:  177:      // for (j = 0; j < 5; j++)
        -:  178:      //	{
        -:  179:      //	  drawCard(i, state);
        -:  180:      //	}
        -:  181:    }
        -:  182:  
        -:  183:  //set embargo tokens to 0 for all supply piles
      280:  184:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 270
branch  1 taken 10 (fallthrough)
        -:  185:    {
      270:  186:      state->embargoTokens[i] = 0;
        -:  187:    }
        -:  188:
        -:  189:  //initialize first player's turn
       10:  190:  state->outpostPlayed = 0;
       10:  191:  state->phase = 0;
       10:  192:  state->numActions = 1;
       10:  193:  state->numBuys = 1;
       10:  194:  state->playedCardCount = 0;
       10:  195:  state->whoseTurn = 0;
       10:  196:  state->handCount[state->whoseTurn] = 0;
        -:  197:  //int it; move to top
        -:  198:
        -:  199:  //Moved draw cards to here, only drawing at the start of a turn
       60:  200:  for (it = 0; it < 5; it++){
branch  0 taken 50
branch  1 taken 10 (fallthrough)
       50:  201:    drawCard(state->whoseTurn, state);
call    0 returned 50
        -:  202:  }
        -:  203:
       10:  204:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 10
        -:  205:
       10:  206:  return 0;
        -:  207:}
        -:  208:
function shuffle called 33 returned 100% blocks executed 100%
       33:  209:int shuffle(int player, struct gameState *state) {
        -:  210: 
        -:  211:
        -:  212:  int newDeck[MAX_DECK];
       33:  213:  int newDeckPos = 0;
        -:  214:  int card;
        -:  215:  int i;
        -:  216:
       33:  217:  if (state->deckCount[player] < 1)
branch  0 taken 10 (fallthrough)
branch  1 taken 23
       10:  218:    return -1;
       23:  219:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 23
        -:  220:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  221:
      276:  222:  while (state->deckCount[player] > 0) {
branch  0 taken 230
branch  1 taken 23 (fallthrough)
      230:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 230
      230:  224:    newDeck[newDeckPos] = state->deck[player][card];
      230:  225:    newDeckPos++;
      804:  226:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 574
branch  1 taken 230 (fallthrough)
      574:  227:      state->deck[player][i] = state->deck[player][i+1];
        -:  228:    }
      230:  229:    state->deckCount[player]--;
        -:  230:  }
      253:  231:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 230
branch  1 taken 23 (fallthrough)
      230:  232:    state->deck[player][i] = newDeck[i];
      230:  233:    state->deckCount[player]++;
        -:  234:  }
        -:  235:
       23:  236:  return 0;
        -:  237:}
        -:  238:
function playCard called 0 returned 0% blocks executed 0%
    #####:  239:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  240:{	
        -:  241:  int card;
    #####:  242:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  243:
        -:  244:  //check if it is the right phase
    #####:  245:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //check if player has enough actions
    #####:  251:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //get card played
    #####:  257:  card = handCard(handPos, state);
call    0 never executed
        -:  258:	
        -:  259:  //check if selected card is an action
    #####:  260:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //play card
    #####:  266:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:	
        -:  271:  //reduce number of actions
    #####:  272:  state->numActions--;
        -:  273:
        -:  274:  //update coins (Treasure cards may be added with card draws)
    #####:  275:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  276:	
    #####:  277:  return 0;
        -:  278:}
        -:  279:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  280:int buyCard(int supplyPos, struct gameState *state) {
        -:  281:  int who;
        -:  282:  if (DEBUG){
        -:  283:    printf("Entering buyCard...\n");
        -:  284:  }
        -:  285:
        -:  286:  // I don't know what to do about the phase thing.
        -:  287:
    #####:  288:  who = state->whoseTurn;
        -:  289:
    #####:  290:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have any buys left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  295:    if (DEBUG)
        -:  296:      printf("There are not any of that type of card left\n");
    #####:  297:    return -1;
    #####:  298:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  299:    if (DEBUG) 
        -:  300:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  301:    return -1;
        -:  302:  } else {
    #####:  303:    state->phase=1;
        -:  304:    //state->supplyCount[supplyPos]--;
    #####:  305:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  306:  
    #####:  307:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  308:    state->numBuys--;
        -:  309:    if (DEBUG)
        -:  310:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  311:  }
        -:  312:
        -:  313:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  314:  //state->discardCount[who]++;
        -:  315:    
    #####:  316:  return 0;
        -:  317:}
        -:  318:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  319:int numHandCards(struct gameState *state) {
    #####:  320:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  321:}
        -:  322:
function handCard called 5 returned 100% blocks executed 100%
        5:  323:int handCard(int handPos, struct gameState *state) {
        5:  324:  int currentPlayer = whoseTurn(state);
call    0 returned 5
        5:  325:  return state->hand[currentPlayer][handPos];
        -:  326:}
        -:  327:
function supplyCount called 12 returned 100% blocks executed 100%
       12:  328:int supplyCount(int card, struct gameState *state) {
       12:  329:  return state->supplyCount[card];
        -:  330:}
        -:  331:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  332:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  333:  int i;
    #####:  334:  int count = 0;
        -:  335:
    #####:  336:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  347:    {
    #####:  348:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  349:    }
        -:  350:
    #####:  351:  return count;
        -:  352:}
        -:  353:
function whoseTurn called 17 returned 100% blocks executed 100%
       17:  354:int whoseTurn(struct gameState *state) {
       17:  355:  return state->whoseTurn;
        -:  356:}
        -:  357:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  358:int endTurn(struct gameState *state) {
        -:  359:  int k;
        -:  360:  int i;
    #####:  361:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  362:  
        -:  363:  //Discard hand
    #####:  364:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  365:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  366:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  367:  }
    #####:  368:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  369:    
        -:  370:  //Code for determining the player
    #####:  371:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  372:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  373:  }
        -:  374:  else{
    #####:  375:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  376:  }
        -:  377:
    #####:  378:  state->outpostPlayed = 0;
    #####:  379:  state->phase = 0;
    #####:  380:  state->numActions = 1;
    #####:  381:  state->coins = 0;
    #####:  382:  state->numBuys = 1;
    #####:  383:  state->playedCardCount = 0;
    #####:  384:  state->handCount[state->whoseTurn] = 0;
        -:  385:
        -:  386:  //int k; move to top
        -:  387:  //Next player draws hand
    #####:  388:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  389:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  390:  }
        -:  391:
        -:  392:  //Update money
    #####:  393:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  394:
    #####:  395:  return 0;
        -:  396:}
        -:  397:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:	
        -:  402:  //if stack of Province cards is empty, the game ends
    #####:  403:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
    #####:  409:  j = 0;
    #####:  410:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  413:	{
    #####:  414:	  j++;
        -:  415:	}
        -:  416:    }
    #####:  417:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  418:    {
    #####:  419:      return 1;
        -:  420:    }
        -:  421:
    #####:  422:  return 0;
        -:  423:}
        -:  424:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
    #####:  428:  int score = 0;
        -:  429:  //score from hand
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  438:    }
        -:  439:
        -:  440:  //score from discard
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  442:    {
    #####:  443:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  449:    }
        -:  450:
        -:  451:  //score from deck
    #####:  452:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  453:    {
    #####:  454:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  459:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  460:    }
        -:  461:
    #####:  462:  return score;
        -:  463:}
        -:  464:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;	
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  476:	{
    #####:  477:	  players[i] = -9999;
        -:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  482:	}
        -:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  490:	{
    #####:  491:	  j = i;
        -:  492:	}
        -:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  501:	{
    #####:  502:	  players[i]++;
        -:  503:	}
        -:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  511:	{
    #####:  512:	  j = i;
        -:  513:	}
        -:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  521:	{
    #####:  522:	  players[i] = 1;
        -:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
        -:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
function drawCard called 106 returned 100% blocks executed 85%
      106:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
      106:  536:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5 (fallthrough)
branch  1 taken 101
        -:  537:    
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
        5:  541:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 5 (fallthrough)
    #####:  542:      state->deck[player][i] = state->discard[player][i];
    #####:  543:      state->discard[player][i] = -1;
        -:  544:    }
        -:  545:
        5:  546:    state->deckCount[player] = state->discardCount[player];
        5:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shufffle the deck
        5:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 5
        -:  551:   
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:    
        5:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
        5:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:    
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:    
        5:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
        5:  567:    if (deckCounter == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  568:      return -1;
        -:  569:
    #####:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  571:    state->deckCount[player]--;
    #####:  572:    state->handCount[player]++;//Increment hand count
        -:  573:  }
        -:  574:
        -:  575:  else{
      101:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
      101:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
      101:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      101:  584:    state->deckCount[player]--;
      101:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
      101:  588:  return 0;
        -:  589:}
        -:  590:
function getCost called 28 returned 100% blocks executed 100%
       28:  591:int getCost(int cardNumber)
        -:  592:{
       28:  593:  switch( cardNumber ) 
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 1
        -:  594:    {
        -:  595:    case curse:
        1:  596:      return 0;
        -:  597:    case estate:
        1:  598:      return 2;
        -:  599:    case duchy:
        1:  600:      return 5;
        -:  601:    case province:
        1:  602:      return 8;
        -:  603:    case copper:
        1:  604:      return 0;
        -:  605:    case silver:
        1:  606:      return 3;
        -:  607:    case gold:
        1:  608:      return 6;
        -:  609:    case adventurer:
        1:  610:      return 6;
        -:  611:    case council_room:
        1:  612:      return 5;
        -:  613:    case feast:
        1:  614:      return 4;
        -:  615:    case gardens:
        1:  616:      return 4;
        -:  617:    case mine:
        1:  618:      return 5;
        -:  619:    case remodel:
        1:  620:      return 4;
        -:  621:    case smithy:
        1:  622:      return 4;
        -:  623:    case village:
        1:  624:      return 3;
        -:  625:    case baron:
        1:  626:      return 4;
        -:  627:    case great_hall:
        1:  628:      return 3;
        -:  629:    case minion:
        1:  630:      return 5;
        -:  631:    case steward:
        1:  632:      return 3;
        -:  633:    case tribute:
        1:  634:      return 5;
        -:  635:    case ambassador:
        1:  636:      return 3;
        -:  637:    case cutpurse:
        1:  638:      return 4;
        -:  639:    case embargo: 
        1:  640:      return 2;
        -:  641:    case outpost:
        1:  642:      return 5;
        -:  643:    case salvager:
        1:  644:      return 4;
        -:  645:    case sea_hag:
        1:  646:      return 4;
        -:  647:    case treasure_map:
        1:  648:      return 4;
        -:  649:    }
        -:  650:	
        1:  651:  return -1;
        -:  652:}
        -:  653:
function cardEffect called 12 returned 100% blocks executed 7%
       12:  654:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  655:{
       12:  656:  int i = 0;
        -:  657:  int j;
        -:  658:  int k;
        -:  659:  int x;
        -:  660:  int index;
       12:  661:  int currentPlayer = whoseTurn(state);
call    0 returned 12
       12:  662:  int nextPlayer = currentPlayer + 1;
        -:  663:
       12:  664:  int tributeRevealedCards[2] = {-1, -1};
        -:  665:  int temphand[MAX_HAND];// moved above the if statement
       12:  666:  int drawntreasure=0;
       12:  667:  int z = 0;// this is the counter for the temp hand
       12:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:  //uses if statements to select card and perform actions for assignment 2
       12:  673:  if(card == adventurer)
branch  0 taken 4 (fallthrough)
branch  1 taken 8
        -:  674:  {
        4:  675:	playAdventurer(drawntreasure, state, currentPlayer, temphand, z);
call    0 returned 4
        4:  676:	return 0;
        -:  677:  }
        8:  678:  if(card == smithy)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        -:  679:  {
        2:  680:	playSmithy(i, currentPlayer, state, handPos);
call    0 returned 2
        2:  681:	return 0;
        -:  682:  }
        -:  683:  
        6:  684:  if(card == village)
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -:  685:  {
        3:  686:	playVillage(currentPlayer, state, handPos);
call    0 returned 3
        3:  687:	return 0;
        -:  688:  }
        -:  689:  
        3:  690:  if(card == great_hall)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  691:  {
    #####:  692:	playGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  693:	return 0;
        -:  694:  }
        -:  695:  
        3:  696:  if(card == steward)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  697:  {
    #####:  698:	playSteward(choice1, choice2, choice3, currentPlayer, state, handPos);
call    0 never executed
    #####:  699:	return 0;
        -:  700:  }
        -:  701:  
        -:  702:  //uses switch to select card and perform actions
        3:  703:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 3
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
        -:  704:    {	
        -:  705:    case council_room:
        -:  706:      //+4 Cards
    #####:  707:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  708:	{
    #####:  709:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  710:	}
        -:  711:			
        -:  712:      //+1 Buy
    #####:  713:      state->numBuys++;
        -:  714:			
        -:  715:      //Each other player draws a card
    #####:  716:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  717:	{
    #####:  718:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      drawCard(i, state);
call    0 never executed
        -:  721:	    }
        -:  722:	}
        -:  723:			
        -:  724:      //put played card in played card pile
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  726:			
    #####:  727:      return 0;
        -:  728:			
        -:  729:    case feast:
        -:  730:      //gain card with cost up to 5
        -:  731:      //Backup hand
    #####:  732:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  733:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  734:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  735:      }
        -:  736:      //Backup hand
        -:  737:
        -:  738:      //Update Coins for Buy
    #####:  739:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  740:      x = 1;//Condition to loop on
    #####:  741:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  742:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  743:	  if (DEBUG)
        -:  744:	    printf("None of that card left, sorry!\n");
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  748:	  }
        -:  749:	}
    #####:  750:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  751:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  755:	  }
        -:  756:	}
        -:  757:	else{
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:	  }
        -:  762:
    #####:  763:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  764:	  x = 0;//No more buying cards
        -:  765:
        -:  766:	  if (DEBUG){
        -:  767:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  768:	  }
        -:  769:
        -:  770:	}
        -:  771:      }     
        -:  772:
        -:  773:      //Reset Hand
    #####:  774:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  775:	state->hand[currentPlayer][i] = temphand[i];
    #####:  776:	temphand[i] = -1;
        -:  777:      }
        -:  778:      //Reset Hand
        -:  779:      			
    #####:  780:      return 0;
        -:  781:			
        -:  782:    case gardens:
    #####:  783:      return -1;
        -:  784:			
        -:  785:    case mine:
    #####:  786:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  789:	{
    #####:  790:	  return -1;
        -:  791:	}
        -:  792:		
    #####:  793:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  794:	{
    #####:  795:	  return -1;
        -:  796:	}
        -:  797:
    #####:  798:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  799:	{
    #####:  800:	  return -1;
        -:  801:	}
        -:  802:
    #####:  803:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  804:
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  807:
        -:  808:      //discard trashed card
    #####:  809:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	{
    #####:  811:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  812:	    {
    #####:  813:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  814:	      break;
        -:  815:	    }
        -:  816:	}
        -:  817:			
    #####:  818:      return 0;
        -:  819:			
        -:  820:    case remodel:
    #####:  821:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  822:
    #####:  823:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  832:
        -:  833:      //discard trashed card
    #####:  834:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	{
    #####:  836:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:	      break;
        -:  840:	    }
        -:  841:	}
        -:  842:
        -:  843:
    #####:  844:      return 0;
        -:  845:		
        -:  846:    case baron:
    #####:  847:      state->numBuys++;//Increase buys by 1!
    #####:  848:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  849:	int p = 0;//Iterator for hand!
    #####:  850:	int card_not_discarded = 1;//Flag for discard set!
    #####:  851:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  852:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  853:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  854:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  855:	    state->discardCount[currentPlayer]++;
    #####:  856:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  857:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  858:	    }
    #####:  859:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  860:	    state->handCount[currentPlayer]--;
    #####:  861:	    card_not_discarded = 0;//Exit the loop
        -:  862:	  }
    #####:  863:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  864:	    if(DEBUG) {
        -:  865:	      printf("No estate cards in your hand, invalid choice\n");
        -:  866:	      printf("Must gain an estate if there are any\n");
        -:  867:	    }
    #####:  868:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  869:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  870:	      state->supplyCount[estate]--;//Decrement estates
    #####:  871:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:		isGameOver(state);
call    0 never executed
        -:  873:	      }
        -:  874:	    }
    #####:  875:	    card_not_discarded = 0;//Exit the loop
        -:  876:	  }
        -:  877:			    
        -:  878:	  else{
    #####:  879:	    p++;//Next card
        -:  880:	  }
        -:  881:	}
        -:  882:      }
        -:  883:			    
        -:  884:      else{
    #####:  885:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  886:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  887:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  888:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  889:	    isGameOver(state);
call    0 never executed
        -:  890:	  }
        -:  891:	}
        -:  892:      }
        -:  893:	    
        -:  894:      
    #####:  895:      return 0;
        -:  896:		
        -:  897:    case minion:
        -:  898:      //+1 action
    #####:  899:      state->numActions++;
        -:  900:			
        -:  901:      //discard card from hand
    #####:  902:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  903:			
    #####:  904:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  905:	{
    #####:  906:	  state->coins = state->coins + 2;
        -:  907:	}
        -:  908:			
    #####:  909:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  910:	{
        -:  911:	  //discard hand
    #####:  912:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  913:	    {
    #####:  914:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  915:	    }
        -:  916:				
        -:  917:	  //draw 4
    #####:  918:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  919:	    {
    #####:  920:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	    }
        -:  922:				
        -:  923:	  //other players discard hand and redraw if hand size > 4
    #####:  924:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  925:	    {
    #####:  926:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  927:		{
    #####:  928:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  929:		    {
        -:  930:		      //discard hand
    #####:  931:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  932:			{
    #####:  933:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  934:			}
        -:  935:							
        -:  936:		      //draw 4
    #####:  937:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  938:			{
    #####:  939:			  drawCard(i, state);
call    0 never executed
        -:  940:			}
        -:  941:		    }
        -:  942:		}
        -:  943:	    }
        -:  944:				
        -:  945:	}
    #####:  946:      return 0;
        -:  947:		
        -:  948:    case tribute:
    #####:  949:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  950:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  951:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  952:	  state->deckCount[nextPlayer]--;
        -:  953:	}
    #####:  954:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  956:	  state->discardCount[nextPlayer]--;
        -:  957:	}
        -:  958:	else{
        -:  959:	  //No Card to Reveal
        -:  960:	  if (DEBUG){
        -:  961:	    printf("No cards to reveal\n");
        -:  962:	  }
        -:  963:	}
        -:  964:      }
        -:  965:	    
        -:  966:      else{
    #####:  967:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  968:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  969:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  970:	    state->deckCount[nextPlayer]++;
    #####:  971:	    state->discard[nextPlayer][i] = -1;
    #####:  972:	    state->discardCount[nextPlayer]--;
        -:  973:	  }
        -:  974:			    
    #####:  975:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  976:	} 
    #####:  977:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  978:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  979:	state->deckCount[nextPlayer]--;
    #####:  980:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  981:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  982:	state->deckCount[nextPlayer]--;
        -:  983:      }    
        -:  984:		       
    #####:  985:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  986:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  987:	state->playedCardCount++;
    #####:  988:	tributeRevealedCards[1] = -1;
        -:  989:      }
        -:  990:
    #####:  991:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  992:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  993:	  state->coins += 2;
        -:  994:	}
        -:  995:		    
    #####:  996:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  997:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  998:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  999:	}
        -: 1000:	else{//Action Card
    #####: 1001:	  state->numActions = state->numActions + 2;
        -: 1002:	}
        -: 1003:      }
        -: 1004:	    
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case ambassador:
    #####: 1008:      j = 0;		//used to check if player has enough cards to discard
        -: 1009:
    #####: 1010:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1011:	{
    #####: 1012:	  return -1;				
        -: 1013:	}
        -: 1014:
    #####: 1015:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
    #####: 1017:	  return -1;
        -: 1018:	}
        -: 1019:
    #####: 1020:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1021:	{
    #####: 1022:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1023:	    {
    #####: 1024:	      j++;
        -: 1025:	    }
        -: 1026:	}
    #####: 1027:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  return -1;				
        -: 1030:	}
        -: 1031:
        -: 1032:      if (DEBUG) 
        -: 1033:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1034:
        -: 1035:      //increase supply count for choosen card by amount being discarded
    #####: 1036:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1037:			
        -: 1038:      //each other player gains a copy of revealed card
    #####: 1039:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
    #####: 1041:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1042:	    {
    #####: 1043:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1044:	    }
        -: 1045:	}
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1049:
        -: 1050:      //trash copies of cards returned to supply
    #####: 1051:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
    #####: 1053:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1054:	    {
    #####: 1055:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1056:		{
    #####: 1057:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1058:		  break;
        -: 1059:		}
        -: 1060:	    }
        -: 1061:	}			
        -: 1062:
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case cutpurse:
        -: 1066:
    #####: 1067:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1068:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1071:	    {
    #####: 1072:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1073:		{
    #####: 1074:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1075:		    {
    #####: 1076:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1077:		      break;
        -: 1078:		    }
    #####: 1079:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1080:		    {
    #####: 1081:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1082:			{
        -: 1083:			  if (DEBUG)
        -: 1084:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1085:			}	
    #####: 1086:		      break;
        -: 1087:		    }		
        -: 1088:		}
        -: 1089:					
        -: 1090:	    }
        -: 1091:				
        -: 1092:	}				
        -: 1093:
        -: 1094:      //discard played card from hand
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1096:
    #####: 1097:      return 0;
        -: 1098:
        -: 1099:		
        -: 1100:    case embargo: 
        -: 1101:      //+2 Coins
    #####: 1102:      state->coins = state->coins + 2;
        -: 1103:			
        -: 1104:      //see if selected pile is in play
    #####: 1105:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  return -1;
        -: 1108:	}
        -: 1109:			
        -: 1110:      //add embargo token to selected supply pile
    #####: 1111:      state->embargoTokens[choice1]++;
        -: 1112:			
        -: 1113:      //trash card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case outpost:
        -: 1118:      //set outpost flag
        3: 1119:      state->outpostPlayed++;
        -: 1120:			
        -: 1121:      //discard card
        3: 1122:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3: 1123:      return 0;
        -: 1124:		
        -: 1125:    case salvager:
        -: 1126:      //+1 buy
    #####: 1127:      state->numBuys++;
        -: 1128:			
    #####: 1129:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
        -: 1131:	  //gain coins equal to trashed card
    #####: 1132:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1133:	  //trash card
    #####: 1134:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1135:	}
        -: 1136:			
        -: 1137:      //discard card
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case sea_hag:
    #####: 1142:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1143:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1144:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1145:	  state->discardCount[i]++;
    #####: 1146:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1147:	}
        -: 1148:      }
    #####: 1149:      return 0;
        -: 1150:		
        -: 1151:    case treasure_map:
        -: 1152:      //search hand for another treasure_map
    #####: 1153:      index = -1;
    #####: 1154:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1157:	    {
    #####: 1158:	      index = i;
    #####: 1159:	      break;
        -: 1160:	    }
        -: 1161:	}
    #####: 1162:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1163:	{
        -: 1164:	  //trash both treasure cards
    #####: 1165:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1166:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1167:
        -: 1168:	  //gain 4 Gold cards
    #####: 1169:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1170:	    {
    #####: 1171:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1172:	    }
        -: 1173:				
        -: 1174:	  //return success
    #####: 1175:	  return 1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //no second treasure_map found in hand
    #####: 1179:      return -1;
        -: 1180:    }
        -: 1181:	
    #####: 1182:  return -1;
        -: 1183:}
        -: 1184:
function discardCard called 8 returned 100% blocks executed 78%
        8: 1185:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1186:{
        -: 1187:	
        -: 1188:  //if card is not trashed, added to Played pile 
        8: 1189:  if (trashFlag < 1)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -: 1190:    {
        -: 1191:      //add card to played pile
        8: 1192:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1193:      state->playedCardCount++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //set played card to -1
        8: 1197:  state->hand[currentPlayer][handPos] = -1;
        -: 1198:	
        -: 1199:  //remove card from player's hand
        8: 1200:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1201:    {
        -: 1202:      //reduce number of cards in hand
    #####: 1203:      state->handCount[currentPlayer]--;
        -: 1204:    }
        8: 1205:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1206:    {
        -: 1207:      //reduce number of cards in hand
    #####: 1208:      state->handCount[currentPlayer]--;
        -: 1209:    }
        -: 1210:  else 	
        -: 1211:    {
        -: 1212:      //replace discarded card with last card in hand
        8: 1213:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1214:      //set last card to -1
        8: 1215:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1216:      //reduce number of cards in hand
        8: 1217:      state->handCount[currentPlayer]--;
        -: 1218:    }
        -: 1219:	
        8: 1220:  return 0;
        -: 1221:}
        -: 1222:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1223:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1224:{
        -: 1225:  //Note: supplyPos is enum of choosen card
        -: 1226:	
        -: 1227:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1228:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1229:    {
    #####: 1230:      return -1;
        -: 1231:    }
        -: 1232:	
        -: 1233:  //added card for [whoseTurn] current player:
        -: 1234:  // toFlag = 0 : add to discard
        -: 1235:  // toFlag = 1 : add to deck
        -: 1236:  // toFlag = 2 : add to hand
        -: 1237:
    #####: 1238:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1239:    {
    #####: 1240:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1241:      state->deckCount[player]++;
        -: 1242:    }
    #####: 1243:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1244:    {
    #####: 1245:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1246:      state->handCount[player]++;
        -: 1247:    }
        -: 1248:  else
        -: 1249:    {
    #####: 1250:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1251:      state->discardCount[player]++;
        -: 1252:    }
        -: 1253:	
        -: 1254:  //decrease number in supply pile
    #####: 1255:  state->supplyCount[supplyPos]--;
        -: 1256:	 
    #####: 1257:  return 0;
        -: 1258:}
        -: 1259:
function updateCoins called 15 returned 100% blocks executed 100%
       15: 1260:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1261:{
        -: 1262:  int i;
        -: 1263:	
        -: 1264:  //reset coin count
       15: 1265:  state->coins = 0;
        -: 1266:
        -: 1267:  //add coins for each Treasure card in player's hand
       90: 1268:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 75
branch  1 taken 15 (fallthrough)
        -: 1269:    {
       75: 1270:      if (state->hand[player][i] == copper)
branch  0 taken 45 (fallthrough)
branch  1 taken 30
        -: 1271:	{
       45: 1272:	  state->coins += 1;
        -: 1273:	}
       30: 1274:      else if (state->hand[player][i] == silver)
branch  0 taken 5 (fallthrough)
branch  1 taken 25
        -: 1275:	{
        5: 1276:	  state->coins += 2;
        -: 1277:	}
       25: 1278:      else if (state->hand[player][i] == gold)
branch  0 taken 5 (fallthrough)
branch  1 taken 20
        -: 1279:	{
        5: 1280:	  state->coins += 3;
        -: 1281:	}	
        -: 1282:    }	
        -: 1283:
        -: 1284:  //add bonus
       15: 1285:  state->coins += bonus;
        -: 1286:
       15: 1287:  return 0;
        -: 1288:}
        -: 1289:
        -: 1290://separate functions for adventurer, smithy, village, great hall, and steward (assignment 2)
function playAdventurer called 4 returned 100% blocks executed 93%
        4: 1291:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -: 1292:{
       53: 1293:  while(drawntreasure<=2){//bug
branch  0 taken 45
branch  1 taken 4 (fallthrough)
       45: 1294:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 5 (fallthrough)
branch  1 taken 40
        5: 1295:	  shuffle(currentPlayer, state);
call    0 returned 5
        -: 1296:	}
       45: 1297:	drawCard(currentPlayer, state);
call    0 returned 45
       45: 1298:	int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       45: 1299:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33 (fallthrough)
branch  1 taken 12
branch  2 taken 33 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 33
       12: 1300:	  drawntreasure++;
        -: 1301:	else{
       33: 1302:	  temphand[z]=cardDrawn;
       33: 1303:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1304:	  //bug
        -: 1305:	}
        -: 1306:  }
        8: 1307:  while(z-1>=0){
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####: 1308:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1309:	z=z-1;
        -: 1310:  }
        4: 1311:  return 0;
        -: 1312:}
        -: 1313:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1314:int playSmithy(int i, int currentPlayer, struct gameState *state, int handPos)
        -: 1315:{
        -: 1316:  //+3 Cards
       10: 1317:  for (i = 0; i <= 3; i++)//bug
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -: 1318:	{
        8: 1319:	  drawCard(currentPlayer, state);
call    0 returned 8
        -: 1320:	}
        -: 1321:			
        -: 1322:  //discard card from hand
        2: 1323:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        2: 1324:  return 0;
        -: 1325:}
        -: 1326:
function playVillage called 3 returned 100% blocks executed 100%
        3: 1327:int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1328:{
        -: 1329:  //+1 Card
        3: 1330:  drawCard(currentPlayer, state);
call    0 returned 3
        -: 1331:		
        -: 1332:  //+2 Actions
        3: 1333:  state->numActions = state->numActions + 2;
        -: 1334:			
        -: 1335:  //discard played card from hand
        3: 1336:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3: 1337:  return 0;
        -: 1338:}
        -: 1339:
function playGreatHall called 0 returned 0% blocks executed 0%
    #####: 1340:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1341:{
        -: 1342:  //+1 Card
    #####: 1343:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1344:			
        -: 1345:  //+1 Actions
    #####: 1346:  state->numActions--;//bug
        -: 1347:			
        -: 1348:  //discard card from hand
    #####: 1349:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1350:  return 0;
        -: 1351:}
        -: 1352:
function playSteward called 0 returned 0% blocks executed 0%
    #####: 1353:int playSteward(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos)
        -: 1354:{
        -: 1355:
    #####: 1356:  if (choice1 = 1)//bug
        -: 1357:  {
        -: 1358:	//+2 cards
    #####: 1359:	drawCard(currentPlayer, state);
call    0 never executed
    #####: 1360:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1361:  }
        -: 1362:  else if (choice1 == 2)
        -: 1363:  {
        -: 1364:	//+2 coins
        -: 1365:	state->coins = state->coins + 2;
        -: 1366:  }
        -: 1367:  else
        -: 1368:  {
        -: 1369:	//trash 2 cards in hand
        -: 1370:	discardCard(choice2, currentPlayer, state, 1);
        -: 1371:	discardCard(choice3, currentPlayer, state, 1);
        -: 1372:  }			
        -: 1373:  
        -: 1374:  //discard card from hand
    #####: 1375:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1376:  return 0;
        -: 1377:}
        -: 1378:		
        -: 1379://end of dominion.c
        -: 1380:
